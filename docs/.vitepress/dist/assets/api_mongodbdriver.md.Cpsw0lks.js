import{_ as t,c as a,o as r,ag as o}from"./chunks/framework.S-Qvb3wi.js";const m=JSON.parse('{"title":"MongoDBDriver","description":"","frontmatter":{"title":"MongoDBDriver"},"headers":[],"relativePath":"api/mongodbdriver.md","filePath":"api/mongodbdriver.md"}'),n={name:"api/mongodbdriver.md"};function d(i,e,s,c,h,l){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="mongodbdriver" tabindex="-1">MongoDBDriver <a class="header-anchor" href="#mongodbdriver" aria-label="Permalink to &quot;MongoDBDriver&quot;">​</a></h1><p>Creates a new MongoDBDriver.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>config</code></td><td>Connection configuration options.</td></tr></tbody></table><h2 id="mongodbpreparedstatement" tabindex="-1">MongoDBPreparedStatement <a class="header-anchor" href="#mongodbpreparedstatement" aria-label="Permalink to &quot;MongoDBPreparedStatement&quot;">​</a></h2><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>driver</code></td><td>The MongoDBDriver instance.</td></tr><tr><td><code>operation</code></td><td>The operation directive string.</td></tr></tbody></table><h2 id="mongodbdriver-1" tabindex="-1">MongoDBDriver <a class="header-anchor" href="#mongodbdriver-1" aria-label="Permalink to &quot;MongoDBDriver&quot;">​</a></h2><p>MongoDB driver implementation. Handles connection, queries, and MongoDB-specific operations.</p><h2 id="mongodbpreparedstatement-1" tabindex="-1">MongoDBPreparedStatement <a class="header-anchor" href="#mongodbpreparedstatement-1" aria-label="Permalink to &quot;MongoDBPreparedStatement&quot;">​</a></h2><p>MongoDBPreparedStatement wraps a MongoDBDriver operation for deferred execution.</p><h2 id="connect" tabindex="-1">connect <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;connect&quot;">​</a></h2><p>Establishes a connection to MongoDB. Builds the URI, configures the client, and selects the database.</p><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="disconnect" tabindex="-1">disconnect <a class="header-anchor" href="#disconnect" aria-label="Permalink to &quot;disconnect&quot;">​</a></h2><p>Closes the MongoDB connection and clears the reference.</p><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h2><p>Executes a MongoDB operation encoded as a string directive. Parses collection, method, and parameters, then dispatches the call.</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>operation</code></td><td>Directive in the format &quot;collection:method&quot;.</td></tr><tr><td><code>params</code></td><td>Parameters object or payload for the operation.</td></tr></tbody></table><p><code>returns</code> — Promise&lt;QueryResult&gt;</p><h2 id="prepare" tabindex="-1">prepare <a class="header-anchor" href="#prepare" aria-label="Permalink to &quot;prepare&quot;">​</a></h2><p>Prepares a MongoDB operation for later execution. MongoDB does not support parameterized statements natively, so this wraps the operation directive in a PreparedStatement.</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>operation</code></td><td>The operation directive string.</td></tr></tbody></table><p><code>returns</code> — Promise&lt;PreparedStatement&gt;</p><h2 id="begintransaction" tabindex="-1">beginTransaction <a class="header-anchor" href="#begintransaction" aria-label="Permalink to &quot;beginTransaction&quot;">​</a></h2><p>Begins a transaction context. MongoDB transactions require a replica set or sharded cluster.</p><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="commit" tabindex="-1">commit <a class="header-anchor" href="#commit" aria-label="Permalink to &quot;commit&quot;">​</a></h2><p>Commits the current transaction context.</p><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="rollback" tabindex="-1">rollback <a class="header-anchor" href="#rollback" aria-label="Permalink to &quot;rollback&quot;">​</a></h2><p>Rolls back the current transaction context.</p><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="getlastinsertid" tabindex="-1">getLastInsertId <a class="header-anchor" href="#getlastinsertid" aria-label="Permalink to &quot;getLastInsertId&quot;">​</a></h2><p>Retrieves the last inserted document ID. For MongoDB, this is included in the result of insert operations.</p><p><code>returns</code> — Promise&lt;string | number&gt;</p><h2 id="escape" tabindex="-1">escape <a class="header-anchor" href="#escape" aria-label="Permalink to &quot;escape&quot;">​</a></h2><p>Escapes a value for inclusion in logging or introspection. MongoDB uses JSON, so this serializes the value.</p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>value</code></td><td>Any JavaScript value.</td></tr></tbody></table><p><code>returns</code> — A JSON-stringified representation.</p><h2 id="getgrammar" tabindex="-1">getGrammar <a class="header-anchor" href="#getgrammar" aria-label="Permalink to &quot;getGrammar&quot;">​</a></h2><p>Returns the grammar instance for query compilation.</p><p><code>returns</code> — MongoDBGrammar</p><h2 id="supportsfeature" tabindex="-1">supportsFeature <a class="header-anchor" href="#supportsfeature" aria-label="Permalink to &quot;supportsFeature&quot;">​</a></h2><p>Determines if the driver supports a given feature.</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>feature</code></td><td>The feature name to check.</td></tr></tbody></table><p><code>returns</code> — boolean</p><h2 id="buildconnectionuri" tabindex="-1">buildConnectionUri <a class="header-anchor" href="#buildconnectionuri" aria-label="Permalink to &quot;buildConnectionUri&quot;">​</a></h2><p>Builds the MongoDB connection URI.</p><p><code>returns</code> — The MongoDB connection string.</p><h2 id="getcollection" tabindex="-1">getCollection <a class="header-anchor" href="#getcollection" aria-label="Permalink to &quot;getCollection&quot;">​</a></h2><p>Returns the MongoDB collection instance by name.</p><h3 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>Collection name.</td></tr></tbody></table><p><code>returns</code> — Collection</p><h2 id="createindex" tabindex="-1">createIndex <a class="header-anchor" href="#createindex" aria-label="Permalink to &quot;createIndex&quot;">​</a></h2><p>Creates an index on a collection.</p><h3 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>collection</code></td><td>Collection name.</td></tr><tr><td><code>keys</code></td><td>Index specification object.</td></tr><tr><td><code>options</code></td><td>Optional index options.</td></tr></tbody></table><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="dropindex" tabindex="-1">dropIndex <a class="header-anchor" href="#dropindex" aria-label="Permalink to &quot;dropIndex&quot;">​</a></h2><p>Drops an index from a collection.</p><h3 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>collection</code></td><td>Collection name.</td></tr><tr><td><code>indexName</code></td><td>Name of the index to drop.</td></tr></tbody></table><p><code>returns</code> — Promise&lt;void&gt;</p><h2 id="execute" tabindex="-1">execute <a class="header-anchor" href="#execute" aria-label="Permalink to &quot;execute&quot;">​</a></h2><p>Executes the prepared operation with given parameters.</p><h3 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>params</code></td><td>Parameters for the operation payload.</td></tr></tbody></table><p><code>returns</code> — Promise&lt;QueryResult&gt;</p><h2 id="close" tabindex="-1">close <a class="header-anchor" href="#close" aria-label="Permalink to &quot;close&quot;">​</a></h2><p>Closes the prepared statement. MongoDB does not require explicit cleanup.</p><p><code>returns</code> — Promise&lt;void&gt;</p>',78)]))}const u=t(n,[["render",d]]);export{m as __pageData,u as default};
