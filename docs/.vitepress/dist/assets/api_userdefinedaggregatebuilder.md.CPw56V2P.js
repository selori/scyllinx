import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.S-Qvb3wi.js";const c=JSON.parse('{"title":"UserDefinedAggregateBuilder","description":"","frontmatter":{"title":"UserDefinedAggregateBuilder"},"headers":[],"relativePath":"api/userdefinedaggregatebuilder.md","filePath":"api/userdefinedaggregatebuilder.md"}'),n={name:"api/userdefinedaggregatebuilder.md"};function r(l,a,h,p,d,k){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="userdefinedaggregatebuilder" tabindex="-1">UserDefinedAggregateBuilder <a class="header-anchor" href="#userdefinedaggregatebuilder" aria-label="Permalink to &quot;UserDefinedAggregateBuilder&quot;">​</a></h1><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>aggregateName</code></td><td>Name of the aggregate to create or drop.</td></tr></tbody></table><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define an aggregate that sums integers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> createSQL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDefinedAggregateBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum_ints&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orReplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stateFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state_sum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stateTypeIs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finalFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;final_sum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toSQL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Executes:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CREATE OR REPLACE AGGREGATE sum_ints(int)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SFUNC state_sum</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// STYPE int</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FINALFUNC final_sum</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// INITCOND 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// To drop the aggregate:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dropSQL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDefinedAggregateBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum_ints&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dropSQL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Executes: DROP AGGREGATE IF EXISTS sum_ints(int)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="userdefinedaggregatebuilder-1" tabindex="-1">UserDefinedAggregateBuilder <a class="header-anchor" href="#userdefinedaggregatebuilder-1" aria-label="Permalink to &quot;UserDefinedAggregateBuilder&quot;">​</a></h2><p>Builder for creating and dropping user-defined aggregates in ScyllaDB/Cassandra. Chain methods to configure the aggregate signature, state/final functions, and options.</p><h2 id="orreplace" tabindex="-1">orReplace <a class="header-anchor" href="#orreplace" aria-label="Permalink to &quot;orReplace&quot;">​</a></h2><p>Add OR REPLACE to the CREATE statement.</p><h2 id="withparameters" tabindex="-1">withParameters <a class="header-anchor" href="#withparameters" aria-label="Permalink to &quot;withParameters&quot;">​</a></h2><p>Define the parameter types for the aggregate.</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>types</code></td><td>List of Scylla primitive types.</td></tr></tbody></table><h2 id="statefunction" tabindex="-1">stateFunction <a class="header-anchor" href="#statefunction" aria-label="Permalink to &quot;stateFunction&quot;">​</a></h2><p>Set the state transition function name (SFUNC).</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>Name of the function.</td></tr></tbody></table><h2 id="statetypeis" tabindex="-1">stateTypeIs <a class="header-anchor" href="#statetypeis" aria-label="Permalink to &quot;stateTypeIs&quot;">​</a></h2><p>Set the state data type (STYPE).</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>type</code></td><td>Primitive ScyllaDB type.</td></tr></tbody></table><h2 id="finalfunction" tabindex="-1">finalFunction <a class="header-anchor" href="#finalfunction" aria-label="Permalink to &quot;finalFunction&quot;">​</a></h2><p>(Optional) Set the final function name (FINALFUNC).</p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>Name of the final function.</td></tr></tbody></table><h2 id="initialcondition" tabindex="-1">initialCondition <a class="header-anchor" href="#initialcondition" aria-label="Permalink to &quot;initialCondition&quot;">​</a></h2><p>(Optional) Set the initial condition (INITCOND).</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td>Initial value expression.</td></tr></tbody></table><h2 id="tosql" tabindex="-1">toSQL <a class="header-anchor" href="#tosql" aria-label="Permalink to &quot;toSQL&quot;">​</a></h2><p>Build and return the CREATE AGGREGATE CQL statement.</p><h2 id="dropsql" tabindex="-1">dropSQL <a class="header-anchor" href="#dropsql" aria-label="Permalink to &quot;dropSQL&quot;">​</a></h2><p>Build and return the DROP AGGREGATE CQL statement (IF EXISTS).</p>`,33)]))}const E=s(n,[["render",r]]);export{c as __pageData,E as default};
