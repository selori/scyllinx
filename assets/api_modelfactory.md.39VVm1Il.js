import{_ as a,c as t,o as r,ag as o}from"./chunks/framework.BfYphy29.js";const f=JSON.parse('{"title":"ModelFactory","description":"","frontmatter":{"title":"ModelFactory"},"headers":[],"relativePath":"api/modelfactory.md","filePath":"api/modelfactory.md"}'),d={name:"api/modelfactory.md"};function i(n,e,s,c,l,h){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="modelfactory" tabindex="-1">ModelFactory <a class="header-anchor" href="#modelfactory" aria-label="Permalink to &quot;ModelFactory&quot;">​</a></h1><h2 id="modelfactory-1" tabindex="-1">ModelFactory <a class="header-anchor" href="#modelfactory-1" aria-label="Permalink to &quot;ModelFactory&quot;">​</a></h2><p>Factory class to generate model instances, raw data, or persist records.</p><h2 id="factory" tabindex="-1">factory <a class="header-anchor" href="#factory" aria-label="Permalink to &quot;factory&quot;">​</a></h2><p>Shortcut to retrieve a defined factory for a model.</p><h2 id="definefactory" tabindex="-1">defineFactory <a class="header-anchor" href="#definefactory" aria-label="Permalink to &quot;defineFactory&quot;">​</a></h2><p>Shortcut to define a new factory.</p><h2 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h2><p>Define a named state with specific overrides.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>State identifier</td></tr><tr><td><code>definition</code></td><td>Partial overrides or function to generate them</td></tr></tbody></table><h2 id="as" tabindex="-1">as <a class="header-anchor" href="#as" aria-label="Permalink to &quot;as&quot;">​</a></h2><p>Apply a named state to the factory.</p><h2 id="times" tabindex="-1">times <a class="header-anchor" href="#times" aria-label="Permalink to &quot;times&quot;">​</a></h2><p>Specify how many instances to create or make.</p><h2 id="create" tabindex="-1">create <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create&quot;">​</a></h2><p>Persist multiple model instances.</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>overrides</code></td><td>Attribute overrides for generation.</td></tr></tbody></table><p><code>returns</code> — Array of persisted model instances.</p><h2 id="createone" tabindex="-1">createOne <a class="header-anchor" href="#createone" aria-label="Permalink to &quot;createOne&quot;">​</a></h2><p>Persist and return a single model instance.</p><h2 id="make" tabindex="-1">make <a class="header-anchor" href="#make" aria-label="Permalink to &quot;make&quot;">​</a></h2><p>Build model instances without saving.</p><h2 id="raw" tabindex="-1">raw <a class="header-anchor" href="#raw" aria-label="Permalink to &quot;raw&quot;">​</a></h2><p>Generate raw attribute data without Model wrapping.</p><h2 id="generateattributes" tabindex="-1">generateAttributes <a class="header-anchor" href="#generateattributes" aria-label="Permalink to &quot;generateAttributes&quot;">​</a></h2><p>Internal: combine definition, states, and overrides, resolving functions.</p><h2 id="clone" tabindex="-1">clone <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;clone&quot;">​</a></h2><p>Clone this factory with existing states.</p><h2 id="define" tabindex="-1">define <a class="header-anchor" href="#define" aria-label="Permalink to &quot;define&quot;">​</a></h2><p>Register a factory definition under a model name.</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>modelName</code></td><td>Unique key matching ModelRegistry.</td></tr><tr><td><code>definition</code></td><td>Default attribute definitions.</td></tr></tbody></table><p><code>returns</code> — The defined factory instance.</p><h2 id="for" tabindex="-1">for <a class="header-anchor" href="#for" aria-label="Permalink to &quot;for&quot;">​</a></h2><p>Retrieve a cloned factory for a model.</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>modelName</code></td><td>Key of the registered factory.</td></tr></tbody></table><p><code>returns</code> — A fresh factory instance.</p>',40)]))}const p=a(d,[["render",i]]);export{f as __pageData,p as default};
