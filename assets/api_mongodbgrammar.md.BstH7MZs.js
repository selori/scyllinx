import{_ as t,c as a,o as r,ag as o}from"./chunks/framework.S-Qvb3wi.js";const p=JSON.parse('{"title":"MongoDBGrammar","description":"","frontmatter":{"title":"MongoDBGrammar"},"headers":[],"relativePath":"api/mongodbgrammar.md","filePath":"api/mongodbgrammar.md"}'),i={name:"api/mongodbgrammar.md"};function d(l,e,n,c,s,h){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="mongodbgrammar" tabindex="-1">MongoDBGrammar <a class="header-anchor" href="#mongodbgrammar" aria-label="Permalink to &quot;MongoDBGrammar&quot;">​</a></h1><p>MongoDB query grammar (converts SQL-like operations to MongoDB operations) Outputs string directives like &quot;collection:operation:payload&quot; to be interpreted by the driver.</p><h2 id="compileselect" tabindex="-1">compileSelect <a class="header-anchor" href="#compileselect" aria-label="Permalink to &quot;compileSelect&quot;">​</a></h2><p>Converts a SQL-like SELECT into a MongoDB find directive.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td>Query components including from, wheres, orders, etc.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string &quot;collection:find:{filter,options}&quot;.</p><h2 id="compileinsert" tabindex="-1">compileInsert <a class="header-anchor" href="#compileinsert" aria-label="Permalink to &quot;compileInsert&quot;">​</a></h2><p>Converts INSERT into insertOne or insertMany directive.</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td>Query components including table and values.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for insert operation.</p><h2 id="compileupdate" tabindex="-1">compileUpdate <a class="header-anchor" href="#compileupdate" aria-label="Permalink to &quot;compileUpdate&quot;">​</a></h2><p>Converts UPDATE into updateMany directive with $set.</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td>Query components including table, wheres, and values.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for update operation.</p><h2 id="compiledelete" tabindex="-1">compileDelete <a class="header-anchor" href="#compiledelete" aria-label="Permalink to &quot;compileDelete&quot;">​</a></h2><p>Converts DELETE into deleteMany directive.</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td>Query components including table and wheres.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for delete operation.</p><h2 id="compilewheres" tabindex="-1">compileWheres <a class="header-anchor" href="#compilewheres" aria-label="Permalink to &quot;compileWheres&quot;">​</a></h2><p>Builds MongoDB filter object from SQL-like where clauses.</p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>wheres</code></td><td>Array of where clause objects.</td></tr></tbody></table><p><code>returnsstring</code> — - MongoDB filter object.</p><h2 id="addbasicwhere" tabindex="-1">addBasicWhere <a class="header-anchor" href="#addbasicwhere" aria-label="Permalink to &quot;addBasicWhere&quot;">​</a></h2><p>Adds basic comparison operators to MongoDB filter.</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>filter</code></td><td>The filter object to mutate.</td></tr><tr><td><code>w</code></td><td>Where clause object.</td></tr></tbody></table><h2 id="compileoptions" tabindex="-1">compileOptions <a class="header-anchor" href="#compileoptions" aria-label="Permalink to &quot;compileOptions&quot;">​</a></h2><p>Builds MongoDB cursor options (projection, sort, skip, limit).</p><h3 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td>Query components including columns, orders, limit, offset.</td></tr></tbody></table><p><code>returnsstring</code> — - MongoDB find options object.</p><h2 id="wraptable" tabindex="-1">wrapTable <a class="header-anchor" href="#wraptable" aria-label="Permalink to &quot;wrapTable&quot;">​</a></h2><p>Wraps a collection name. MongoDB collections require no special wrapping.</p><h3 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>table</code></td><td>Collection name.</td></tr></tbody></table><p><code>returnsstring</code> — - The unmodified collection name.</p><h2 id="wrapcolumn" tabindex="-1">wrapColumn <a class="header-anchor" href="#wrapcolumn" aria-label="Permalink to &quot;wrapColumn&quot;">​</a></h2><p>Wraps a field/column name. MongoDB fields require no special wrapping.</p><h3 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>column</code></td><td>Field name.</td></tr></tbody></table><p><code>returnsstring</code> — - The unmodified field name.</p><h2 id="parameter" tabindex="-1">parameter <a class="header-anchor" href="#parameter" aria-label="Permalink to &quot;parameter&quot;">​</a></h2><p>Formats a parameter for directive payload. JSON-stringifies the value.</p><h3 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>value</code></td><td>Any JavaScript value.</td></tr></tbody></table><p><code>returnsstring</code> — - JSON string of the value.</p><h2 id="compilecreatetable" tabindex="-1">compileCreateTable <a class="header-anchor" href="#compilecreatetable" aria-label="Permalink to &quot;compileCreateTable&quot;">​</a></h2><p>Compiles a create-collection operation for MongoDB. Note: MongoDB creates collections implicitly on insert, but explicit creation can include options like validator.</p><h3 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>definition</code></td><td>TableDefinition with collection name and options.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for creating a collection.</p><h2 id="compilealtertable" tabindex="-1">compileAlterTable <a class="header-anchor" href="#compilealtertable" aria-label="Permalink to &quot;compileAlterTable&quot;">​</a></h2><p>Compiles an alter-collection operation for MongoDB. Supports limited alterations like updating validation rules.</p><h3 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>definition</code></td><td>TableDefinition with new validation rules.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for modifying collection.</p><h2 id="compiletableexists" tabindex="-1">compileTableExists <a class="header-anchor" href="#compiletableexists" aria-label="Permalink to &quot;compileTableExists&quot;">​</a></h2><p>Compiles a check for collection existence.</p><h3 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>table</code></td><td>Collection name to check.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for listing collections.</p><h2 id="compilecolumnexists" tabindex="-1">compileColumnExists <a class="header-anchor" href="#compilecolumnexists" aria-label="Permalink to &quot;compileColumnExists&quot;">​</a></h2><p>Compiles a check for field existence in a collection. Note: MongoDB requires sampling or schema overview.</p><h3 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>table</code></td><td>Collection name.</td></tr><tr><td><code>column</code></td><td>Field name to check.</td></tr></tbody></table><p><code>returnsstring</code> — - Directive string for field existence check.</p><h2 id="rename" tabindex="-1">rename <a class="header-anchor" href="#rename" aria-label="Permalink to &quot;rename&quot;">​</a></h2><p>Compiles a rename-collection operation.</p><h3 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>from</code></td><td>Current collection name.</td></tr><tr><td><code>to</code></td><td>New collection name.</td></tr></tbody></table>',75)]))}const b=t(i,[["render",d]]);export{p as __pageData,b as default};
